type Mutation {
  join: ID!
  register: RegisterResult!
  play(input: PlayInput!): Boolean!
}

type Query {
  users: [User!]!
  whoami: ID
  ping: String!
  game(id: ID!): GameResult
  myToken(gameId: ID!): ID!
}

type RegisterResult {
  accessToken: String!
  user: User!
}

type User {
  id: ID!
  tokenVersion: Int!
}

input PlayInput {
  gameId: ID!
  token: Token!
  position: Position!
}

enum Token {
  O
  X
}

enum Position {
  A
  B
  C
  D
  E
  F
  G
  H
  I
}

interface Game {
  id: ID!
}

union GameResult = GamePlaying | GameDraw | GameWon

type GamePlaying implements Game {
  id: ID!
  next: Token!
}

type GameDraw implements Game {
  id: ID!
}

type GameWon implements Game {
  id: ID!
  winner: Token!
}
