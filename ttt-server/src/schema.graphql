schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  me: User
  games: [Game]
}

type Mutation {
  login(email: String!): String
  playMove(gameId: ID!, avatar: Avatar!, position: Position!): Game!
  joinGame: Game
}

type Subscription {
  moves(gameId: ID!): Move!
  game(gameId: ID!): Game!
  # joinGame(userId: ID!): Game!
}

type User {
  id: ID!
  email: String!
}

type Game {
  id: ID!
  state: GameState!
}

union GameState = GameLobby | GamePlaying | GameOverWin | GameOverTie

type GameLobby {
  waiting: Player!
}

type GamePlaying {
  xPlayer: Player!
  oPlayer: Player!
  moves: [Move!]!
  currentPlayer: Player!
}

type GameOverWin {
  xPlayer: Player!
  oPlayer: Player!
  moves: [Move!]!
  winner: Player
}

type GameOverTie {
  xPlayer: Player!
  oPlayer: Player!
  moves: [Move!]!
}

type Player {
  user: User!
  avatar: Avatar!
  games: [Game!]
}

type Move {
  position: Position!
  avatar: Avatar!
}

"""
The Os and Xs in tic-tac-toe
"""
enum Avatar {
  O
  X
}

"""
Represents a tic-tac-toe board, like this:
A B C
D E F
G H I
"""
enum Position {
  A
  B
  C
  D
  E
  F
  G
  H
  I
}
